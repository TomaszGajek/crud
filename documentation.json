{
  "pipes": [],
  "interfaces": [
    {
      "name": "ClubState",
      "id": "interface-ClubState-f5006ca26a16e676c750772213042424",
      "file": "src/app/dashboard/state/club.reducer.ts",
      "type": "interface",
      "sourceCode": "import { SportClub } from '@core/models/sport-club.interface';\nimport { createReducer, on } from '@ngrx/store';\nimport * as ClubActions from './club.actions';\n\nexport interface ClubState {\n  clubs: SportClub[];\n  error: string;\n}\n\nconst initialState: ClubState = {\n  clubs: null,\n  error: ''\n};\n\nexport const clubReducer = createReducer<ClubState>(\n  initialState,\n  on(\n    ClubActions.loadClubsSuccessful,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        clubs: action.clubs,\n        error: ''\n      };\n    }\n  ),\n  on(\n    ClubActions.loadClubsFailure,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        clubs: null,\n        error: action.error\n      };\n    }\n  ),\n  on(\n    ClubActions.deleteClubSuccess,\n    (state, action): ClubState => {\n      const clubs: SportClub[] = state.clubs.filter((club) => club.id !== action.id);\n\n      return {\n        ...state,\n        clubs\n      };\n    }\n  ),\n  on(\n    ClubActions.deleteClubFailure,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(\n    ClubActions.addClubSuccess,\n    (state, action): ClubState => {\n      const clubs: SportClub[] = [...state.clubs, action.club];\n\n      return {\n        ...state,\n        clubs\n      };\n    }\n  ),\n  on(\n    ClubActions.addClubFailure,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(\n    ClubActions.updateClubSuccess,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        clubs: state.clubs.map((club) => (club.id === action.club.id ? action.club : club))\n      };\n    }\n  )\n);\n",
      "properties": [
        {
          "name": "clubs",
          "type": "SportClub[]",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "error",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "Coordinates",
      "id": "interface-Coordinates-1a5594fe1d3d4a9a5a81e1970ea95329",
      "file": "src/app/core/models/coordinates.interface.ts",
      "type": "interface",
      "sourceCode": "export interface Coordinates {\n  lng: number;\n  lat: number;\n}\n",
      "properties": [
        {
          "name": "lat",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "lng",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "Localization",
      "id": "interface-Localization-564480046ff6014d96975bb79d3a9708",
      "file": "src/app/core/models/localization.interface.ts",
      "type": "interface",
      "sourceCode": "export interface Localization {\n  center: [number, number];\n  place_name: string;\n}\n",
      "properties": [
        {
          "name": "center",
          "type": "[number, number]",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "place_name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "LocalizationResponse",
      "id": "interface-LocalizationResponse-14c9632b19b1ab5b8c19bf1f8113c702",
      "file": "src/app/core/models/localization-response.interface.ts",
      "type": "interface",
      "sourceCode": "export interface LocalizationResponse {\n  place_name: string;\n  geometry: {\n    coordinates: number[];\n  };\n}\n",
      "properties": [
        {
          "name": "geometry",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "place_name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "SportClub",
      "id": "interface-SportClub-84326e8aad0434f2b7032d15ea8f194f",
      "file": "src/app/core/models/sport-club.interface.ts",
      "type": "interface",
      "sourceCode": "import { SportCategories } from './sport-categories.enum';\nimport { Localization } from './localization.interface';\n\nexport interface SportClub {\n  id?: number;\n  name: string;\n  category: SportCategories;\n  description: string;\n  localization: Localization;\n}\n",
      "properties": [
        {
          "name": "category",
          "type": "SportCategories",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "description",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "id",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "localization",
          "type": "Localization",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "SportClubsService",
      "id": "interface-SportClubsService-11dab94a491455461a976accebb2611b",
      "file": "src/app/dashboard/services/sport-clubs.service.ts",
      "type": "interface",
      "sourceCode": "import { Observable } from 'rxjs';\nimport { SportClub } from '@core/models/sport-club.interface';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { InjectionToken } from '@angular/core';\n\nexport interface SportClubsService {\n  getClubs(): Observable<SportClub[]>;\n\n  deleteClub(id: number): Observable<void>;\n\n  addClub(club: SportClub): Observable<SportClub>;\n\n  updateClub(club: SportClub): Observable<SportClub>;\n\n  handleError(err: HttpErrorResponse): Observable<never>;\n}\n\nexport const SPORT_CLUBS = new InjectionToken<SportClubsService>('SportClubsService');\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 152,
      "methods": [
        {
          "name": "addClub",
          "args": [
            {
              "name": "club",
              "type": "SportClub"
            }
          ],
          "optional": false,
          "returnType": "Observable<SportClub>",
          "typeParameters": [],
          "line": 11,
          "jsdoctags": [
            {
              "name": "club",
              "type": "SportClub",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteClub",
          "args": [
            {
              "name": "id",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 9,
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getClubs",
          "args": [],
          "optional": false,
          "returnType": "Observable<SportClub[]>",
          "typeParameters": [],
          "line": 7
        },
        {
          "name": "handleError",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse"
            }
          ],
          "optional": false,
          "returnType": "Observable<never>",
          "typeParameters": [],
          "line": 15,
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateClub",
          "args": [
            {
              "name": "club",
              "type": "SportClub"
            }
          ],
          "optional": false,
          "returnType": "Observable<SportClub>",
          "typeParameters": [],
          "line": 13,
          "jsdoctags": [
            {
              "name": "club",
              "type": "SportClub",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "State",
      "id": "interface-State-653df66523a2c3ce4b6ec7aaa2e84da1",
      "file": "src/app/dashboard/state/index.ts",
      "type": "interface",
      "sourceCode": "import { ClubState } from './club.reducer';\nimport * as ClubSelectors from './club.selectors';\nimport * as ClubActions from './club.actions';\n\nexport interface State {\n  clubs: ClubState;\n}\n\nexport { ClubSelectors, ClubActions };\n",
      "properties": [
        {
          "name": "clubs",
          "type": "ClubState",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "ClubEffects",
      "id": "injectable-ClubEffects-b409f1df421b1a43efefffcb5574e53d",
      "file": "src/app/dashboard/state/club.effects.ts",
      "properties": [
        {
          "name": "addClub$",
          "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ClubActions.addClub),\n      concatMap((action) => {\n        return this.clubsService.addClub(action.club).pipe(\n          map((club) => {\n            this.snackBarService.open('Success', 'You added the club', {\n              duration: this.snackBarDuration\n            });\n\n            return ClubActions.addClubSuccess({ club });\n          }),\n          catchError((error) => {\n            this.snackBarService.open('Error', 'Failed to delete item', {\n              duration: this.snackBarDuration\n            });\n\n            return of(ClubActions.addClubFailure({ error }));\n          })\n        );\n      })\n    );\n  })",
          "type": "",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "deleteClubs$",
          "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ClubActions.deleteClub),\n      mergeMap((action) =>\n        this.clubsService.deleteClub(action.id).pipe(\n          map(() => {\n            this.snackBarService.open('Success', 'Your item has been deleted', {\n              duration: this.snackBarDuration\n            });\n\n            return ClubActions.deleteClubSuccess({ id: action.id });\n          }),\n          catchError((error) => {\n            this.snackBarService.open('Error', 'Failed to delete item', {\n              duration: this.snackBarDuration\n            });\n\n            return of(ClubActions.deleteClubFailure({ error }));\n          })\n        )\n      )\n    );\n  })",
          "type": "",
          "optional": false,
          "description": "",
          "line": 78
        },
        {
          "name": "loadClubs$",
          "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ClubActions.loadClubs),\n      mergeMap(() =>\n        this.clubsService.getClubs().pipe(map((clubs: SportClub[]) => ClubActions.loadClubsSuccessful({ clubs })))\n      ),\n      catchError((error: string) => of(ClubActions.loadClubsFailure({ error })))\n    );\n  })",
          "type": "",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "snackBarDuration",
          "defaultValue": "2500",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [112]
        },
        {
          "name": "updateClub$",
          "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ClubActions.updateClub),\n      concatMap((action) =>\n        this.clubsService.updateClub(action.club).pipe(\n          map((club) => {\n            this.snackBarService.open('Success', 'You updated the club', {\n              duration: this.snackBarDuration\n            });\n\n            return ClubActions.updateClubSuccess({ club });\n          }),\n          catchError((error) => {\n            this.snackBarService.open('Error', 'Failed to update item', {\n              duration: this.snackBarDuration\n            });\n\n            return of(ClubActions.updateClubFailure({ error }));\n          })\n        )\n      )\n    );\n  })",
          "type": "",
          "optional": false,
          "description": "",
          "line": 54
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as ClubActions from './club.actions';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { SportClub } from '@core/models/sport-club.interface';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SPORT_CLUBS, SportClubsService } from '@app/dashboard/services/sport-clubs.service';\n\n@Injectable()\nexport class ClubEffects {\n  private snackBarDuration = 2500;\n\n  constructor(\n    private actions$: Actions,\n    private snackBarService: MatSnackBar,\n    @Inject(SPORT_CLUBS) private clubsService: SportClubsService\n  ) {}\n\n  loadClubs$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ClubActions.loadClubs),\n      mergeMap(() =>\n        this.clubsService.getClubs().pipe(map((clubs: SportClub[]) => ClubActions.loadClubsSuccessful({ clubs })))\n      ),\n      catchError((error: string) => of(ClubActions.loadClubsFailure({ error })))\n    );\n  });\n\n  addClub$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ClubActions.addClub),\n      concatMap((action) => {\n        return this.clubsService.addClub(action.club).pipe(\n          map((club) => {\n            this.snackBarService.open('Success', 'You added the club', {\n              duration: this.snackBarDuration\n            });\n\n            return ClubActions.addClubSuccess({ club });\n          }),\n          catchError((error) => {\n            this.snackBarService.open('Error', 'Failed to delete item', {\n              duration: this.snackBarDuration\n            });\n\n            return of(ClubActions.addClubFailure({ error }));\n          })\n        );\n      })\n    );\n  });\n\n  updateClub$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ClubActions.updateClub),\n      concatMap((action) =>\n        this.clubsService.updateClub(action.club).pipe(\n          map((club) => {\n            this.snackBarService.open('Success', 'You updated the club', {\n              duration: this.snackBarDuration\n            });\n\n            return ClubActions.updateClubSuccess({ club });\n          }),\n          catchError((error) => {\n            this.snackBarService.open('Error', 'Failed to update item', {\n              duration: this.snackBarDuration\n            });\n\n            return of(ClubActions.updateClubFailure({ error }));\n          })\n        )\n      )\n    );\n  });\n\n  deleteClubs$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ClubActions.deleteClub),\n      mergeMap((action) =>\n        this.clubsService.deleteClub(action.id).pipe(\n          map(() => {\n            this.snackBarService.open('Success', 'Your item has been deleted', {\n              duration: this.snackBarDuration\n            });\n\n            return ClubActions.deleteClubSuccess({ id: action.id });\n          }),\n          catchError((error) => {\n            this.snackBarService.open('Error', 'Failed to delete item', {\n              duration: this.snackBarDuration\n            });\n\n            return of(ClubActions.deleteClubFailure({ error }));\n          })\n        )\n      )\n    );\n  });\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "actions$",
            "type": "Actions"
          },
          {
            "name": "snackBarService",
            "type": "MatSnackBar"
          },
          {
            "name": "clubsService",
            "type": "SportClubsService"
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "actions$",
            "type": "Actions",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "snackBarService",
            "type": "MatSnackBar",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "clubsService",
            "type": "SportClubsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "DrawerService",
      "id": "injectable-DrawerService-f8937bf8aa159c9cab5b5e2b1f7cf8b0",
      "file": "src/app/dashboard/services/drawer.service.ts",
      "properties": [
        {
          "name": "subject",
          "defaultValue": "new Subject<boolean>()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "getDrawerState",
          "args": [],
          "optional": false,
          "returnType": "Observable<boolean>",
          "typeParameters": [],
          "line": 14
        },
        {
          "name": "setDrawerClosed",
          "args": [
            {
              "name": "status",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 10,
          "jsdoctags": [
            {
              "name": "status",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DrawerService {\n  private subject: Subject<boolean> = new Subject<boolean>();\n\n  setDrawerClosed(status: boolean): void {\n    this.subject.next(status);\n  }\n\n  getDrawerState(): Observable<boolean> {\n    return this.subject.asObservable();\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "HttpSportClubsService",
      "id": "injectable-HttpSportClubsService-25e7332a68dbc0bce9d4f58cec7c6f08",
      "file": "src/app/dashboard/services/http-sport-clubs.service.ts",
      "properties": [
        {
          "name": "url",
          "defaultValue": "'/clubs'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "methods": [
        {
          "name": "addClub",
          "args": [
            {
              "name": "club",
              "type": "SportClub"
            }
          ],
          "optional": false,
          "returnType": "Observable<SportClub>",
          "typeParameters": [],
          "line": 22,
          "jsdoctags": [
            {
              "name": "club",
              "type": "SportClub",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteClub",
          "args": [
            {
              "name": "id",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "Observable<void>",
          "typeParameters": [],
          "line": 18,
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getClubs",
          "args": [],
          "optional": false,
          "returnType": "Observable<SportClub[]>",
          "typeParameters": [],
          "line": 14
        },
        {
          "name": "handleError",
          "args": [
            {
              "name": "err",
              "type": "HttpErrorResponse"
            }
          ],
          "optional": false,
          "returnType": "Observable<never>",
          "typeParameters": [],
          "line": 32,
          "jsdoctags": [
            {
              "name": "err",
              "type": "HttpErrorResponse",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateClub",
          "args": [
            {
              "name": "club",
              "type": "SportClub"
            }
          ],
          "optional": false,
          "returnType": "Observable<SportClub>",
          "typeParameters": [],
          "line": 26,
          "jsdoctags": [
            {
              "name": "club",
              "type": "SportClub",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { SportClub } from '@core/models/sport-club.interface';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, delay } from 'rxjs/operators';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { SportClubsService } from '@app/dashboard/services/sport-clubs.service';\n\n@Injectable()\nexport class HttpSportClubsService implements SportClubsService {\n  url = '/clubs';\n\n  constructor(private http: HttpClient) {}\n\n  getClubs(): Observable<SportClub[]> {\n    return this.http.get<SportClub[]>(this.url).pipe(delay(1000), catchError(this.handleError));\n  }\n\n  deleteClub(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.url}/${id}`).pipe(catchError(this.handleError));\n  }\n\n  addClub(club: SportClub): Observable<SportClub> {\n    return this.http.post<SportClub>(`${this.url}`, club).pipe(catchError(this.handleError));\n  }\n\n  updateClub(club: SportClub): Observable<SportClub> {\n    console.log(club);\n\n    return this.http.put<SportClub>(`${this.url}/${club.id}`, club).pipe(catchError(this.handleError));\n  }\n\n  handleError(err: HttpErrorResponse): Observable<never> {\n    const errorMessage = `Backend returned code ${err.status}: ${err.message}`;\n\n    return throwError(errorMessage);\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "MapSearchService",
      "id": "injectable-MapSearchService-2855872076b552573f56a25152908ce4",
      "file": "src/app/dashboard/services/map-search.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "querySearch",
          "args": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "Observable<LocalizationResponse>",
          "typeParameters": [],
          "line": 14,
          "jsdoctags": [
            {
              "name": "value",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LocalizationResponse } from '@core/models/localization-response.interface';\nimport { environment } from '../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapSearchService {\n  constructor(private http: HttpClient) {}\n\n  querySearch(value: string): Observable<LocalizationResponse> {\n    const query = encodeURIComponent(value);\n    const url = `https://api.mapbox.com/geocoding/v5/mapbox.places/${query}.json?access_token=${environment.mapbox.accessToken}&autocomplete=true`;\n\n    return this.http\n      .get<{ features: LocalizationResponse }>(url)\n      .pipe(map((data: { features: LocalizationResponse }) => data.features));\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient"
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "MapService",
      "id": "injectable-MapService-db52baa1d31e0db45122296506e0e1c0",
      "file": "src/app/dashboard/services/map.service.ts",
      "properties": [
        {
          "name": "map",
          "type": "mapboxgl.Map",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        },
        {
          "name": "popup",
          "type": "mapboxgl.Popup",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        },
        {
          "name": "style",
          "defaultValue": "'mapbox://styles/mapbox/streets-v11'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "createMarkers",
          "args": [
            {
              "name": "items",
              "type": "SportClub[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "jsdoctags": [
            {
              "name": "items",
              "type": "SportClub[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createPopups",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71
        },
        {
          "name": "flyToSelectedPoint",
          "args": [
            {
              "type": "Coordinates"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 82,
          "jsdoctags": [
            {
              "type": "Coordinates",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleMarkerClickEvent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 118
        },
        {
          "name": "handleMarkerMouseEnterEvent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97
        },
        {
          "name": "handleMarkerMouseLeaveEvent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 111
        },
        {
          "name": "init",
          "args": [
            {
              "name": "lng",
              "type": "number"
            },
            {
              "name": "lat",
              "type": "number"
            },
            {
              "name": "zoom",
              "type": "number"
            },
            {
              "name": "container",
              "type": "string"
            },
            {
              "name": "items",
              "type": "SportClub[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "jsdoctags": [
            {
              "name": "lng",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "lat",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "zoom",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "container",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "items",
              "type": "SportClub[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "zoomOut",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90
        }
      ],
      "description": "",
      "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport * as mapboxgl from 'mapbox-gl';\nimport { environment } from '../../../environments/environment';\nimport { SportClub } from '@core/models/sport-club.interface';\nimport { Router } from '@angular/router';\nimport { Coordinates } from '@core/models/coordinates.interface';\nimport { DrawerService } from '@app/dashboard/services/drawer.service';\nimport { ACCESS_TOKEN } from '@app/app.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n  private map: mapboxgl.Map;\n  private popup: mapboxgl.Popup;\n  private style = 'mapbox://styles/mapbox/streets-v11';\n\n  constructor(\n    private router: Router,\n    private drawerService: DrawerService,\n    @Inject(ACCESS_TOKEN) private accessToken: string\n  ) {}\n\n  init(lng: number, lat: number, zoom: number, container: string, items: SportClub[]): void {\n    this.map = new mapboxgl.Map({\n      accessToken: this.accessToken,\n      container,\n      style: this.style,\n      zoom,\n      center: [lng, lat]\n    });\n\n    this.createMarkers(items);\n    this.createPopups();\n  }\n\n  createMarkers(items: SportClub[]): void {\n    this.map.on('load', () => {\n      this.map.addSource('places', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: items.map((item) => ({\n            type: 'Feature',\n            properties: {\n              id: item.id,\n              description: `<strong>${item.name}</strong><p>category: ${item.category}</p><p>${item.localization.place_name}</p>`\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: [item.localization.center[0], item.localization.center[1]]\n            }\n          }))\n        }\n      });\n\n      this.map.addLayer({\n        id: 'places',\n        type: 'circle',\n        source: 'places',\n        paint: {\n          'circle-color': '#4264fb',\n          'circle-radius': 8,\n          'circle-stroke-width': 2,\n          'circle-stroke-color': '#ffffff'\n        }\n      });\n    });\n  }\n\n  createPopups(): void {\n    this.popup = new mapboxgl.Popup({\n      closeButton: false,\n      closeOnClick: false\n    });\n\n    this.handleMarkerMouseEnterEvent();\n    this.handleMarkerMouseLeaveEvent();\n    this.handleMarkerClickEvent();\n  }\n\n  flyToSelectedPoint({ lng, lat }: Coordinates): void {\n    this.map.fire('flyend');\n    this.map.flyTo({\n      center: [lng, lat],\n      zoom: 15\n    });\n  }\n\n  zoomOut(): void {\n    this.map.flyTo({\n      center: [21.017532, 52.237049],\n      zoom: 5\n    });\n  }\n\n  handleMarkerMouseEnterEvent(): void {\n    this.map.on('mouseenter', 'places', (e) => {\n      const coordinates: Coordinates = e.lngLat;\n      const description: string = e.features[0].properties.description;\n\n      this.map.getCanvas().style.cursor = 'pointer';\n      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n      }\n\n      this.popup.setLngLat(coordinates).setHTML(description).addTo(this.map);\n    });\n  }\n\n  handleMarkerMouseLeaveEvent(): void {\n    this.map.on('mouseleave', 'places', () => {\n      this.map.getCanvas().style.cursor = '';\n      this.popup.remove();\n    });\n  }\n\n  handleMarkerClickEvent(): void {\n    this.map.on('click', 'places', (e) => {\n      this.drawerService.setDrawerClosed(false);\n      void this.router.navigate(['', e.features[0].properties.id]);\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "router",
            "type": "Router"
          },
          {
            "name": "drawerService",
            "type": "DrawerService"
          },
          {
            "name": "accessToken",
            "type": "string"
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "router",
            "type": "Router",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "drawerService",
            "type": "DrawerService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "accessToken",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    }
  ],
  "classes": [
    {
      "name": "AppPage",
      "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
      "file": "e2e/src/app.po.ts",
      "type": "class",
      "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
      "properties": [],
      "methods": [
        {
          "name": "getTitleText",
          "args": [],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 8,
          "modifierKind": [120]
        },
        {
          "name": "navigateTo",
          "args": [],
          "optional": false,
          "returnType": "Promise<unknown>",
          "typeParameters": [],
          "line": 4,
          "modifierKind": [120]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-cdde1db6dc08f6dcbb28389e4f55a337",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": ["./app.component.scss"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<router-outlet></router-outlet>\n"
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
      "file": "src/stories/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-button",
      "styleUrls": ["./button.css"],
      "styles": [],
      "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "backgroundColor",
          "description": "<p>What background color to use</p>\n",
          "line": 26,
          "type": "string"
        },
        {
          "name": "label",
          "defaultValue": "'Button'",
          "description": "<p>Button contents</p>\n",
          "line": 40
        },
        {
          "name": "primary",
          "defaultValue": "false",
          "description": "<p>Is this the principal call to action on the page?</p>\n",
          "line": 20
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "description": "<p>How large should the button be?</p>\n",
          "line": 32,
          "type": "\"small\" | \"medium\" | \"large\""
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter<Event>()",
          "description": "<p>Optional click handler</p>\n",
          "line": 46,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
          "styleUrl": "./button.css"
        }
      ],
      "stylesData": "",
      "accessors": {
        "classes": {
          "name": "classes",
          "getSignature": {
            "name": "classes",
            "type": "[]",
            "returnType": "string[]",
            "line": 48
          }
        }
      }
    },
    {
      "name": "ClubContentComponent",
      "id": "component-ClubContentComponent-1c1ce6cfd174ed4f72d07df4dadd484f",
      "file": "src/app/dashboard/components/club-content/club-content.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-club-content",
      "styleUrls": ["./club-content.component.scss"],
      "styles": [],
      "templateUrl": ["./club-content.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "selectedClub$",
          "defaultValue": "this.activatedRoute.params.pipe(\n    switchMap((props) =>\n      this.store.select(ClubSelectors.getClubById, { id: +props.id })\n    )\n  )",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "subGuard$",
          "defaultValue": "new Subject<void>()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "deleteItem",
          "args": [
            {
              "name": "id",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37
        },
        {
          "name": "openFormDialog",
          "args": [
            {
              "name": "club",
              "type": "SportClub"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "jsdoctags": [
            {
              "name": "club",
              "type": "SportClub",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "openWarningDialog",
          "args": [
            {
              "name": "id",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "jsdoctags": [
            {
              "name": "id",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "return",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { filter, switchMap, takeUntil } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { ClubSelectors } from '../../state';\nimport { ClubActions } from '../../state';\nimport { MatDialog } from '@angular/material/dialog';\nimport { WarningModalComponent } from '@shared/components/warning-modal/warning-modal.component';\nimport { ModalEnum } from '@core/models/modal.enum';\nimport { SportClub } from '@core/models/sport-club.interface';\nimport { ClubModalFormComponent } from '../club-modal-form/club-modal-form.component';\nimport { MapService } from '@app/dashboard/services/map.service';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-club-content',\n  templateUrl: './club-content.component.html',\n  styleUrls: ['./club-content.component.scss']\n})\nexport class ClubContentComponent implements OnDestroy {\n  selectedClub$ = this.activatedRoute.params.pipe(\n    switchMap((props) =>\n      this.store.select(ClubSelectors.getClubById, { id: +props.id })\n    )\n  );\n\n  private subGuard$: Subject<void> = new Subject<void>();\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private store: Store,\n    private dialog: MatDialog,\n    private mapService: MapService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.subGuard$.next();\n    this.subGuard$.unsubscribe();\n  }\n\n  openFormDialog(club: SportClub): void {\n    this.dialog.open(ClubModalFormComponent, {\n      width: '500px',\n      data: club\n    });\n  }\n\n  openWarningDialog(id: number): void {\n    const dialogRef = this.dialog.open(WarningModalComponent, {\n      panelClass: 'custom-dialog-container'\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(\n        filter((result: ModalEnum) => {\n          return result === ModalEnum.CONFIRM;\n        }),\n        takeUntil(this.subGuard$)\n      )\n      .subscribe(() => this.deleteItem(id));\n  }\n\n  deleteItem(id: number): void {\n    this.store.dispatch(ClubActions.deleteClub({ id }));\n    void this.router.navigate(['/']);\n  }\n\n  return(): void {\n    void this.router.navigate(['/']);\n    this.mapService.zoomOut();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".mat-card-title.mat-card-margin-bottom-20 {\n  margin-bottom: 20px;\n}\n",
          "styleUrl": "./club-content.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "router",
            "type": "Router"
          },
          {
            "name": "activatedRoute",
            "type": "ActivatedRoute"
          },
          {
            "name": "store",
            "type": "Store"
          },
          {
            "name": "dialog",
            "type": "MatDialog"
          },
          {
            "name": "mapService",
            "type": "MapService"
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "router",
            "type": "Router",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "activatedRoute",
            "type": "ActivatedRoute",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "store",
            "type": "Store",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dialog",
            "type": "MatDialog",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "mapService",
            "type": "MapService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "templateData": "<div *ngIf=\"selectedClub$ | async as selectedClub\">\n  <app-toolbar [title]=\"selectedClub.name\">\n    <button\n      (click)=\"openFormDialog(selectedClub)\"\n      mat-menu-item\n    >\n      <mat-icon>mode_edit_outline</mat-icon>\n      Edit Club\n    </button>\n    <button\n      (click)=\"openWarningDialog(selectedClub.id)\"\n      mat-menu-item\n    >\n      <mat-icon>delete</mat-icon>\n      Delete Club\n    </button>\n    <button\n      mat-menu-item\n      (click)=\"return()\"\n    >\n      <mat-icon>chevron_left</mat-icon>\n      Return\n    </button>\n  </app-toolbar>\n  <mat-card class=\"mat-elevation-z\">\n    <mat-card-title class=\"mat-card-margin-bottom-20\">category: {{ selectedClub.category }}</mat-card-title>\n    <mat-card-subtitle>{{ selectedClub.localization.place_name }}</mat-card-subtitle>\n    <mat-card-content>\n      <p>{{ selectedClub.description }}</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n\n"
    },
    {
      "name": "ClubListComponent",
      "id": "component-ClubListComponent-a2b955648651be0f72cc6d870dc86b1c",
      "file": "src/app/dashboard/components/club-list/club-list.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-club-list",
      "styleUrls": ["./club-list.component.scss"],
      "styles": [],
      "templateUrl": ["./club-list.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "clubs$",
          "defaultValue": "this.store.select(ClubSelectors.getClubs)",
          "type": "Observable<SportClub[]>",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "dataSource",
          "type": "MatTableDataSource<SportClub>",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "displayedColumns",
          "defaultValue": "['id', 'name', 'category']",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "selection",
          "defaultValue": "new SelectionModel<SportClub>(false, [])",
          "type": "",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "smallDevice",
          "type": "",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [112]
        },
        {
          "name": "sort",
          "type": "MatSort",
          "optional": false,
          "description": "",
          "line": 31,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "MatSort"
            }
          ]
        },
        {
          "name": "subGuard$",
          "defaultValue": "new Subject<void>()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [112]
        },
        {
          "name": "title",
          "defaultValue": "'Sport Clubs'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "methodsClass": [
        {
          "name": "addClub",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81
        },
        {
          "name": "applyFilter",
          "args": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97,
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "closeDrawer",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93
        },
        {
          "name": "handleSelectedClub",
          "args": [
            {
              "name": "club",
              "type": "SportClub"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70,
          "jsdoctags": [
            {
              "name": "club",
              "type": "SportClub",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, AfterContentInit, OnDestroy, ViewChild, OnInit } from '@angular/core';\n\nimport { Store } from '@ngrx/store';\nimport { ClubSelectors, State } from '../../state';\nimport { Observable, Subject } from 'rxjs';\nimport { MapService } from '../../services/map.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { ModalEnum } from '@core/models/modal.enum';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ClubModalFormComponent } from '../club-modal-form/club-modal-form.component';\nimport { SportClub } from '@core/models/sport-club.interface';\nimport { DrawerService } from '@app/dashboard/services/drawer.service';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { SMALL_WIDTH_BREAKPOINT } from '@core/models/breakpoints.constants';\n\n@Component({\n  selector: 'app-club-list',\n  templateUrl: './club-list.component.html',\n  styleUrls: ['./club-list.component.scss']\n})\nexport class ClubListComponent implements OnInit, OnDestroy, AfterContentInit {\n  title = 'Sport Clubs';\n  clubs$: Observable<SportClub[]> = this.store.select(ClubSelectors.getClubs);\n  displayedColumns: string[] = ['id', 'name', 'category'];\n  dataSource: MatTableDataSource<SportClub>;\n  selection = new SelectionModel<SportClub>(false, []);\n\n  @ViewChild(MatSort) sort: MatSort;\n\n  private subGuard$: Subject<void> = new Subject<void>();\n  private smallDevice;\n\n  constructor(\n    private store: Store<State>,\n    private mapService: MapService,\n    private dialog: MatDialog,\n    private drawerService: DrawerService,\n    private breakpointObserver: BreakpointObserver\n  ) {}\n\n  ngOnInit(): void {\n    this.breakpointObserver\n      .observe([`(max-width: ${SMALL_WIDTH_BREAKPOINT}px)`])\n      .pipe(takeUntil(this.subGuard$))\n      .subscribe((state) => {\n        this.smallDevice = state.matches;\n      });\n  }\n\n  ngAfterContentInit(): void {\n    this.clubs$\n      .pipe(\n        filter((clubs) => clubs?.length > 0),\n        takeUntil(this.subGuard$)\n      )\n      .subscribe((clubs) => {\n        this.dataSource = new MatTableDataSource<SportClub>(clubs);\n        this.dataSource.sort = this.sort;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.subGuard$.next();\n    this.subGuard$.unsubscribe();\n  }\n\n  handleSelectedClub(club: SportClub): void {\n    this.mapService.flyToSelectedPoint({\n      lng: club.localization.center[0],\n      lat: club.localization.center[1]\n    });\n\n    if (this.smallDevice) {\n      this.closeDrawer();\n    }\n  }\n\n  addClub(): void {\n    const dialogRef = this.dialog.open(ClubModalFormComponent, {\n      panelClass: 'custom-dialog-container'\n    });\n\n    dialogRef.afterClosed().pipe(\n      filter((result: ModalEnum) => {\n        return result === ModalEnum.CONFIRM;\n      })\n    );\n  }\n\n  closeDrawer(): void {\n    this.drawerService.setDrawerClosed(true);\n  }\n\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '../../../../styles/mixins';\n\n.clubs-wrapper {\n  padding: 16px;\n}\n\n.close-drawer-button {\n  display: none;\n\n  @include md {\n    display: block;\n  }\n}\n\n.mat-spinner-wrapper {\n  display: flex;\n  justify-content: center;\n  height: 100%;\n  padding-top: 20%;\n}\n",
          "styleUrl": "./club-list.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "store",
            "type": "Store<State>"
          },
          {
            "name": "mapService",
            "type": "MapService"
          },
          {
            "name": "dialog",
            "type": "MatDialog"
          },
          {
            "name": "drawerService",
            "type": "DrawerService"
          },
          {
            "name": "breakpointObserver",
            "type": "BreakpointObserver"
          }
        ],
        "line": 34,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store<State>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "mapService",
            "type": "MapService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dialog",
            "type": "MatDialog",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "drawerService",
            "type": "DrawerService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "breakpointObserver",
            "type": "BreakpointObserver",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy", "AfterContentInit"],
      "templateData": "<app-toolbar [title]=\"title\">\n    <button\n      (click)=\"addClub()\"\n      mat-menu-item\n      class=\"add-club-button\"\n    >\n      <mat-icon>library_add</mat-icon>\n      Add Club\n    </button>\n  <button\n    (click)=\"closeDrawer()\"\n    mat-menu-item\n    class=\"close-drawer-button\"\n  >\n    <mat-icon>close</mat-icon>\n    Close menu\n  </button>\n</app-toolbar>\n\n<div class=\"clubs-wrapper\">\n  <mat-form-field class=\"filter-wrapper\">\n    <mat-label>Filter</mat-label>\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Write value\" #input>\n  </mat-form-field>\n  <ng-container *ngIf=\"dataSource; else loading\">\n    <table mat-table [dataSource]=\"dataSource\" matSort>\n\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\n        <td mat-cell *matCellDef=\"let club\"> {{club.id}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n        <td mat-cell *matCellDef=\"let club\"> {{club.name}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"category\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Category </th>\n        <td mat-cell *matCellDef=\"let club\"> {{club.category}} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row\n          *matRowDef=\"let club;\n        columns: displayedColumns;\"\n          (click)=\"handleSelectedClub(club); selection.toggle(club)\"\n          [ngClass]=\"{ highlighted: selection.isSelected(club)}\"\n          class=\"mat-row-action\"\n      ></tr>\n\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td>\n      </tr>\n    </table>\n  </ng-container>\n  <ng-template #loading>\n    <div class=\"mat-spinner-wrapper\">\n      <mat-spinner></mat-spinner>\n    </div>\n  </ng-template>\n</div>\n"
    },
    {
      "name": "ClubModalFormComponent",
      "id": "component-ClubModalFormComponent-70baba91f236849d75102441e9ba73b0",
      "file": "src/app/dashboard/components/club-modal-form/club-modal-form.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-club-modal-form",
      "styleUrls": ["./club-modal-form.component.scss"],
      "styles": [],
      "templateUrl": ["./club-modal-form.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "categories",
          "defaultValue": "Object.values(this.SportCategoriesEnum)",
          "type": "SportCategories[]",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "club",
          "type": "SportClub",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "form",
          "type": "FormGroup",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "options$",
          "type": "Observable<LocalizationResponse>",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "SportCategoriesEnum",
          "defaultValue": "SportCategories",
          "type": "",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "title",
          "type": "",
          "optional": false,
          "description": "",
          "line": 39
        }
      ],
      "methodsClass": [
        {
          "name": "createForm",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70
        },
        {
          "name": "dismiss",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 119
        },
        {
          "name": "displayFn",
          "args": [
            {
              "name": "localization",
              "type": "Pick<LocalizationResponse | place_name>"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 83,
          "jsdoctags": [
            {
              "name": "localization",
              "type": "Pick<LocalizationResponse | place_name>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51
        },
        {
          "name": "save",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 114
        },
        {
          "name": "submitForm",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormControlName,\n  FormGroup,\n  Validators\n} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { SportCategories } from '@core/models/sport-categories.enum';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  startWith,\n  switchMap\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { LocalizationResponse } from '@core/models/localization-response.interface';\nimport { Store } from '@ngrx/store';\nimport { SportClub } from '@core/models/sport-club.interface';\nimport { ClubActions } from '../../state';\nimport { Localization } from '@core/models/localization.interface';\nimport { MapSearchService } from '@app/dashboard/services/map-search.service';\nimport { localizationValidator } from '@core/validators/localization.validator';\n\n@Component({\n  selector: 'app-club-modal-form',\n  templateUrl: './club-modal-form.component.html',\n  styleUrls: ['./club-modal-form.component.scss']\n})\nexport class ClubModalFormComponent implements OnInit {\n  SportCategoriesEnum: typeof SportCategories = SportCategories;\n  categories: SportCategories[] = Object.values(this.SportCategoriesEnum);\n  form: FormGroup;\n  options$: Observable<LocalizationResponse>;\n  club: SportClub;\n  title;\n\n  constructor(\n    private dialogRef: MatDialogRef<ClubModalFormComponent>,\n    private formBuilder: FormBuilder,\n    private mapSearchService: MapSearchService,\n    private store: Store,\n    @Inject(MAT_DIALOG_DATA) data: SportClub\n  ) {\n    this.club = data;\n  }\n\n  ngOnInit(): void {\n    this.createForm();\n    this.title = this.club ? 'Edit Club' : 'Add Club';\n\n    this.options$ = this.form.get('localization').valueChanges.pipe(\n      startWith(\n        this.club\n          ? `${this.club.localization.center[0]}, ${this.club.localization.center[1]}`\n          : ''\n      ),\n      debounceTime(500),\n      distinctUntilChanged(),\n      filter((value) => !!value),\n      switchMap((value: string) => this.mapSearchService.querySearch(value))\n    );\n\n    this.form.valueChanges.subscribe(() => console.log(this.form));\n  }\n\n  createForm(): void {\n    this.form = this.formBuilder.group({\n      name: [this.club ? this.club.name : '', Validators.required],\n      category: [this.club ? this.club.category : '', Validators.required],\n      description: [this.club ? this.club.description : ''],\n      localization: ['', [Validators.required, localizationValidator()]]\n    });\n\n    if (this.club) {\n      this.form.get('localization').setValue(this.club.localization);\n    }\n  }\n\n  displayFn(localization: Pick<LocalizationResponse, 'place_name'>): string {\n    return localization && localization.place_name\n      ? localization.place_name\n      : '';\n  }\n\n  submitForm(): void {\n    const {\n      name,\n      category,\n      description\n    }: Pick<SportClub, 'name' | 'category' | 'description'> = this.form.value;\n\n    const { place_name, center }: Localization = this.form.value.localization;\n\n    const club: SportClub = {\n      id: this.club ? this.club.id : null,\n      name,\n      category,\n      description,\n      localization: {\n        place_name,\n        center\n      }\n    };\n\n    this.club\n      ? this.store.dispatch(ClubActions.updateClub({ club }))\n      : this.store.dispatch(ClubActions.addClub({ club }));\n  }\n\n  save(): void {\n    this.submitForm();\n    this.dialogRef.close(null);\n  }\n\n  dismiss(): void {\n    this.dialogRef.close(null);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./club-modal-form.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "dialogRef",
            "type": "MatDialogRef<ClubModalFormComponent>"
          },
          {
            "name": "formBuilder",
            "type": "FormBuilder"
          },
          {
            "name": "mapSearchService",
            "type": "MapSearchService"
          },
          {
            "name": "store",
            "type": "Store"
          },
          {
            "name": "data",
            "type": "SportClub"
          }
        ],
        "line": 39,
        "jsdoctags": [
          {
            "name": "dialogRef",
            "type": "MatDialogRef<ClubModalFormComponent>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "formBuilder",
            "type": "FormBuilder",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "mapSearchService",
            "type": "MapSearchService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "store",
            "type": "Store",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "data",
            "type": "SportClub",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<mat-toolbar color=\"primary\">\n  <h2 mat-dialog-title>{{title}}</h2>\n</mat-toolbar>\n<mat-dialog-content>\n  <form [formGroup]=\"form\" (ngSubmit)=\"submitForm()\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Club Name</mat-label>\n      <input matInput formControlName=\"name\" required>\n      <mat-error\n        *ngIf=\"form.controls['name'].hasError('required')\">\n        Club name is required\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Categories</mat-label>\n      <mat-select formControlName=\"category\" required>\n        <mat-option *ngFor=\"let category of categories\" [value]=\"category\">{{category}}</mat-option>\n      </mat-select>\n      <mat-error\n        *ngIf=\"form.controls['category'].hasError('required')\">\n        Select a category\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Club Description</mat-label>\n      <textarea matInput formControlName=\"description\"></textarea>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Choose localization</mat-label>\n      <input type=\"text\"\n             placeholder=\"Pick one\"\n             aria-label=\"Text\"\n             matInput\n             formControlName=\"localization\"\n             [matAutocomplete]=\"auto\" required>\n      <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n          <mat-option *ngFor=\"let option of options$ | async\" [value]=\"option\">\n            {{ option.place_name }}\n          </mat-option>\n      </mat-autocomplete>\n      <mat-error\n        *ngIf=\"form.controls['localization'].hasError('required')\">\n        Select a localization\n      </mat-error>\n    </mat-form-field>\n  </form>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button color=\"primary\" (click)=\"save()\" [disabled]=\"form.invalid\">\n    <mat-icon>edit</mat-icon>\n    Save\n  </button>\n  <button mat-button color=\"warn\" (click)=\"dismiss()\">\n    <mat-icon>cancel</mat-icon>\n    Cancel\n  </button>\n</mat-dialog-actions>\n"
    },
    {
      "name": "ClubsComponent",
      "id": "component-ClubsComponent-936133a2b8f701715a238abb65240f19",
      "file": "src/app/dashboard/containers/clubs/clubs.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-clubs",
      "styleUrls": ["./clubs.component.scss"],
      "styles": [],
      "templateUrl": ["./clubs.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "clubs$",
          "type": "Observable<SportClub[]>",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "drawer",
          "type": "MatDrawer",
          "optional": false,
          "description": "",
          "line": 30,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "MatDrawer"
            }
          ]
        },
        {
          "name": "errorMessage$",
          "type": "Observable<string>",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "isScreenSmall$",
          "defaultValue": "this.breakpointObserver\n    .observe([`(max-width: ${SMALL_WIDTH_BREAKPOINT}px)`])\n    .pipe(\n      tap((state) => (this.smallDevice = state.matches)),\n      map((state: BreakpointState) => state.matches)\n    )",
          "type": "Observable<boolean>",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "smallDevice",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [112]
        },
        {
          "name": "subGuard$",
          "defaultValue": "new Subject<void>()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42
        },
        {
          "name": "prepareRoute",
          "args": [
            {
              "name": "outlet",
              "type": "RouterOutlet"
            }
          ],
          "optional": false,
          "returnType": "RouterOutlet",
          "typeParameters": [],
          "line": 62,
          "jsdoctags": [
            {
              "name": "outlet",
              "type": "RouterOutlet",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { AfterViewChecked, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { ClubSelectors, ClubActions, State } from '../../state';\nimport { Observable, Subject } from 'rxjs';\nimport { SportClub } from '@core/models/sport-club.interface';\nimport { RouterOutlet } from '@angular/router';\nimport { slideInAnimation } from '@app/dashboard/animations';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { MatDrawer } from '@angular/material/sidenav';\nimport { map, share, takeUntil, tap } from 'rxjs/operators';\nimport { DrawerService } from '@app/dashboard/services/drawer.service';\nimport { SMALL_WIDTH_BREAKPOINT } from '@core/models/breakpoints.constants';\n\n@Component({\n  selector: 'app-clubs',\n  templateUrl: './clubs.component.html',\n  styleUrls: ['./clubs.component.scss'],\n  animations: [slideInAnimation]\n})\nexport class ClubsComponent implements OnInit, AfterViewChecked, OnDestroy {\n  errorMessage$: Observable<string>;\n  clubs$: Observable<SportClub[]>;\n  isScreenSmall$: Observable<boolean> = this.breakpointObserver\n    .observe([`(max-width: ${SMALL_WIDTH_BREAKPOINT}px)`])\n    .pipe(\n      tap((state) => (this.smallDevice = state.matches)),\n      map((state: BreakpointState) => state.matches)\n    );\n\n  @ViewChild(MatDrawer) drawer: MatDrawer;\n\n  private subGuard$: Subject<void> = new Subject<void>();\n  private smallDevice;\n\n  constructor(\n    private store: Store<State>,\n    private breakpointObserver: BreakpointObserver,\n    private changeRef: ChangeDetectorRef,\n    private drawerService: DrawerService\n  ) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(ClubActions.loadClubs());\n    this.clubs$ = this.store.select(ClubSelectors.getClubs).pipe(share(), tap(console.log));\n    this.errorMessage$ = this.store.select(ClubSelectors.getError);\n\n    this.drawerService\n      .getDrawerState()\n      .pipe(takeUntil(this.subGuard$))\n      .subscribe((status: boolean) => void (status ? this.drawer.close() : this.drawer.open()));\n  }\n\n  ngAfterViewChecked(): void {\n    this.changeRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.subGuard$.next();\n    this.subGuard$.unsubscribe();\n  }\n\n  prepareRoute(outlet: RouterOutlet): RouterOutlet {\n    if (this.smallDevice) {\n      return;\n    }\n    return outlet && outlet.activatedRouteData && outlet.activatedRouteData['animation'];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import '../../../../styles/colors';\n@import '../../../../styles/mixins';\n\n.sport-clubs-container {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n\n.sport-clubs-list {\n  padding-top: 0;\n}\n\n.sidenav {\n  width: 40%;\n\n  @include md {\n    width: 100%;\n  }\n}\n\n.map-content {\n  width: 100%;\n}\n\n.map-spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.button-drawer {\n  display: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: white;\n  background: $primary-background;\n  height: 64px;\n  width: 75px;\n  border-radius: 0;\n\n  @include md {\n    display: block;\n  }\n\n  @include sm {\n    height: 56px;\n    width: 56px;\n  }\n}\n",
          "styleUrl": "./clubs.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "store",
            "type": "Store<State>"
          },
          {
            "name": "breakpointObserver",
            "type": "BreakpointObserver"
          },
          {
            "name": "changeRef",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "drawerService",
            "type": "DrawerService"
          }
        ],
        "line": 33,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store<State>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "breakpointObserver",
            "type": "BreakpointObserver",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "changeRef",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "drawerService",
            "type": "DrawerService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "AfterViewChecked", "OnDestroy"],
      "templateData": "<mat-drawer-container class=\"sport-clubs-container\" autosize>\n  <mat-drawer\n    #drawer\n    [opened]=\"(isScreenSmall$ | async) === false\"\n    [mode]=\"(isScreenSmall$ | async) ? 'over' : 'side'\"\n    class=\"sidenav\">\n    <mat-nav-list class=\"sport-clubs-list\">\n      <div [@routeAnimations]=\"prepareRoute(outlet)\">\n        <router-outlet #outlet=\"outlet\"></router-outlet>\n      </div>\n    </mat-nav-list>\n  </mat-drawer>\n  <mat-drawer-content class=\"map-content\">\n    <ng-container *ngIf=\"clubs$ | async as clubs; else loader\">\n      <app-map [clubs]=\"clubs\"></app-map>\n      <button mat-button (click)=\"drawer.toggle()\" class=\"button-drawer\">\n        <mat-icon>more_vert</mat-icon>\n      </button>\n    </ng-container>\n    <ng-template #loader>\n      <mat-spinner class=\"map-spinner\"></mat-spinner>\n    </ng-template>\n  </mat-drawer-content>\n</mat-drawer-container>\n"
    },
    {
      "name": "HeaderComponent",
      "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
      "file": "src/stories/header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-header",
      "styleUrls": ["./header.css"],
      "styles": [],
      "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "line": 53,
          "type": "unknown"
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 62,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 56,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 59,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
          "styleUrl": "./header.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "MapComponent",
      "id": "component-MapComponent-0d9bba0e744de52a27a2bb3d707ddaba",
      "file": "src/app/dashboard/components/map/map.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-map",
      "styleUrls": ["./map.component.scss"],
      "styles": [],
      "templateUrl": ["./map.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clubs",
          "line": 12,
          "type": "[]"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { MapService } from '../../services/map.service';\nimport { SportClub } from '@core/models/sport-club.interface';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MapComponent {\n  @Input() set clubs(value: SportClub[]) {\n    if (value.length > 0) {\n      this.mapService.init(19.476951, 52.168837, 5, 'map', value);\n    }\n  }\n  constructor(private mapService: MapService) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".match-parent {\n  width: 100%;\n  height: 100%;\n}\n",
          "styleUrl": "./map.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "mapService",
            "type": "MapService"
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "mapService",
            "type": "MapService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "clubs": {
          "name": "clubs",
          "setSignature": {
            "name": "clubs",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "[]"
              }
            ],
            "returnType": "void",
            "line": 12,
            "jsdoctags": [
              {
                "name": "value",
                "type": "[]",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<div id=\"map\" class=\"map match-parent\"></div>\n"
    },
    {
      "name": "PageComponent",
      "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
      "file": "src/stories/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-page",
      "styleUrls": ["./page.css"],
      "styles": [],
      "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "line": 64,
          "type": "unknown"
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 73,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 67,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 70,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
          "styleUrl": "./page.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "ToolbarComponent",
      "id": "component-ToolbarComponent-a6829aa3d6d133df076a39e26a464503",
      "file": "src/app/dashboard/components/toolbar/toolbar.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-toolbar",
      "styleUrls": ["./toolbar.component.scss"],
      "styles": [],
      "templateUrl": ["./toolbar.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "title",
          "line": 9
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss']\n})\nexport class ToolbarComponent {\n  @Input() title;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "$iconSize: 50px;\n$mat-icon-color: #fff;\n\n.mat-toolbar {\n  display: flex;\n  justify-content: space-between;\n}\n\n.mat-icon {\n  font-size: 30px;\n  color: $mat-icon-color;\n  background: transparent;\n  width: $iconSize;\n  height: $iconSize;\n  line-height: $iconSize;\n}\n",
          "styleUrl": "./toolbar.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<mat-toolbar color=\"primary\">\n  {{ title }}\n  <button mat-button [matMenuTriggerFor]=\"menu\">\n    <mat-icon>more_vert</mat-icon>\n  </button>\n  <mat-menu #menu=\"matMenu\" class=\"mat-toolbar-menu\">\n    <ng-content></ng-content>\n  </mat-menu>\n</mat-toolbar>\n\n"
    },
    {
      "name": "WarningModalComponent",
      "id": "component-WarningModalComponent-85b10ace6579d31c584377bf3a59e9e7",
      "file": "src/app/shared/components/warning-modal/warning-modal.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-warning-modal",
      "styleUrls": ["./warning-modal.component.scss"],
      "styles": [],
      "templateUrl": ["./warning-modal.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "delete",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 14
        },
        {
          "name": "dismiss",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { ModalEnum } from '@core/models/modal.enum';\n\n@Component({\n  selector: 'app-warning-modal',\n  templateUrl: './warning-modal.component.html',\n  styleUrls: ['./warning-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WarningModalComponent {\n  constructor(private dialogRef: MatDialogRef<WarningModalComponent>) {}\n\n  delete(): void {\n    this.dialogRef.close(ModalEnum.CONFIRM);\n  }\n\n  dismiss(): void {\n    this.dialogRef.close(ModalEnum.CANCEL);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./warning-modal.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "dialogRef",
            "type": "MatDialogRef<WarningModalComponent>"
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "dialogRef",
            "type": "MatDialogRef<WarningModalComponent>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<mat-toolbar color=\"warn\">\n  <h2 mat-dialog-title>Warning</h2>\n</mat-toolbar>\n<mat-dialog-content>\n  <p>The delete action is irreversible.</p>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button color=\"primary\" (click)=\"delete()\">\n    <mat-icon>delete</mat-icon>\n    Delete\n  </button>\n  <button mat-button color=\"warn\" (click)=\"dismiss()\">\n    <mat-icon>cancel</mat-icon>\n    Cancel\n  </button>\n</mat-dialog-actions>\n"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "CoreModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRoutingModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "CoreModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "DashboardModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClubContentComponent"
            },
            {
              "name": "ClubListComponent"
            },
            {
              "name": "ClubModalFormComponent"
            },
            {
              "name": "ClubsComponent"
            },
            {
              "name": "MapComponent"
            },
            {
              "name": "ToolbarComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "DashboardRoutingModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "DashboardRoutingModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "MaterialModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "SharedModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "WarningModalComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "MaterialModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "MaterialModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "ACCESS_TOKEN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.config.ts",
        "type": "",
        "defaultValue": "new InjectionToken<string>('access-token')"
      },
      {
        "name": "accessTokenProvider",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/core.module.ts",
        "type": "object",
        "defaultValue": "{\n  provide: ACCESS_TOKEN,\n  useValue: environment.mapbox.accessToken\n}"
      },
      {
        "name": "addClub",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Add Club',\n  props<{ club: SportClub }>()\n)"
      },
      {
        "name": "addClubFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Add Failure',\n  props<{ error: string }>()\n)"
      },
      {
        "name": "addClubSuccess",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Add Success',\n  props<{ club: SportClub }>()\n)"
      },
      {
        "name": "clubReducer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.reducer.ts",
        "type": "",
        "defaultValue": "createReducer<ClubState>(\n  initialState,\n  on(\n    ClubActions.loadClubsSuccessful,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        clubs: action.clubs,\n        error: ''\n      };\n    }\n  ),\n  on(\n    ClubActions.loadClubsFailure,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        clubs: null,\n        error: action.error\n      };\n    }\n  ),\n  on(\n    ClubActions.deleteClubSuccess,\n    (state, action): ClubState => {\n      const clubs: SportClub[] = state.clubs.filter((club) => club.id !== action.id);\n\n      return {\n        ...state,\n        clubs\n      };\n    }\n  ),\n  on(\n    ClubActions.deleteClubFailure,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(\n    ClubActions.addClubSuccess,\n    (state, action): ClubState => {\n      const clubs: SportClub[] = [...state.clubs, action.club];\n\n      return {\n        ...state,\n        clubs\n      };\n    }\n  ),\n  on(\n    ClubActions.addClubFailure,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(\n    ClubActions.updateClubSuccess,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        clubs: state.clubs.map((club) => (club.id === action.club.id ? action.club : club))\n      };\n    }\n  )\n)"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "deleteClub",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Delete',\n  props<{ id: number }>()\n)"
      },
      {
        "name": "deleteClubFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Delete Failure',\n  props<{ error: string }>()\n)"
      },
      {
        "name": "deleteClubSuccess",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Delete Success',\n  props<{ id: number }>()\n)"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "type": "object",
        "defaultValue": "{\n  production: true,\n  mapbox: {\n    accessToken:\n      'pk.eyJ1Ijoia29zbWFnYSIsImEiOiJja25vZTkzc3AwbmRwMnVsYXlncm5reW11In0.pTcaWlaltMbDcofKlAPHMw'\n  }\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "type": "object",
        "defaultValue": "{\n  production: false,\n  mapbox: {\n    accessToken: 'pk.eyJ1Ijoia29zbWFnYSIsImEiOiJja25vZTkzc3AwbmRwMnVsYXlncm5reW11In0.pTcaWlaltMbDcofKlAPHMw'\n  }\n}"
      },
      {
        "name": "getClubById",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n  getClubFeatureState,\n  (state: ClubState, { id }) => state.clubs.find((club) => club.id === id)\n)"
      },
      {
        "name": "getClubFeatureState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.selectors.ts",
        "type": "",
        "defaultValue": "createFeatureSelector<ClubState>('clubs')"
      },
      {
        "name": "getClubs",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n  getClubFeatureState,\n  (state) => state.clubs\n)"
      },
      {
        "name": "getError",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n  getClubFeatureState,\n  (state) => state.error\n)"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.reducer.ts",
        "type": "ClubState",
        "defaultValue": "{\n  clubs: null,\n  error: ''\n}"
      },
      {
        "name": "Large",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "loadClubs",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction('[Sport Clubs] Load')"
      },
      {
        "name": "loadClubsFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Load Failure',\n  props<{ error: string }>()\n)"
      },
      {
        "name": "loadClubsSuccessful",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Load Successful',\n  props<{ clubs: SportClub[] }>()\n)"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "MODULES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/material.module.ts",
        "type": "[]",
        "defaultValue": "[\n  MatSidenavModule,\n  MatListModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatMenuModule,\n  MatButtonModule,\n  MatDialogModule,\n  MatTableModule,\n  MatSortModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatSnackBarModule,\n  MatSelectModule,\n  MatAutocompleteModule,\n  MatCardModule,\n  MatProgressSpinnerModule\n]"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "type": "literal type"
      },
      {
        "name": "Secondary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "slideInAnimation",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/animations.ts",
        "type": "",
        "defaultValue": "trigger('routeAnimations', [\n  transition('one <=> two', [\n    style({ position: 'relative' }),\n    query(':enter, :leave', [\n      style({\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%'\n      })\n    ]),\n    query(':enter', [style({ left: '-100%' })]),\n    query(':leave', animateChild()),\n    group([\n      query(':leave', [animate('300ms ease-out', style({ left: '100%' }))]),\n      query(':enter', [animate('300ms ease-out', style({ left: '0%' }))])\n    ]),\n    query(':enter', animateChild())\n  ])\n])"
      },
      {
        "name": "Small",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "SMALL_WIDTH_BREAKPOINT",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/core/models/breakpoints.constants.ts",
        "type": "number",
        "defaultValue": "720"
      },
      {
        "name": "SPORT_CLUBS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/services/sport-clubs.service.ts",
        "type": "",
        "defaultValue": "new InjectionToken<SportClubsService>('SportClubsService')"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "type": "Story<Button>",
        "defaultValue": "(args: Button) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "type": "Story<Header>",
        "defaultValue": "(args: Header) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "type": "Story<Page>",
        "defaultValue": "(args: Page) => ({\n  props: args,\n})"
      },
      {
        "name": "updateClub",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Update',\n  props<{ club: SportClub }>()\n)"
      },
      {
        "name": "updateClubFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Update Failure',\n  props<{ error: string }>()\n)"
      },
      {
        "name": "updateClubSuccess",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/dashboard/state/club.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n  '[Sport Clubs] Update Success',\n  props<{ club: SportClub }>()\n)"
      }
    ],
    "functions": [
      {
        "name": "localizationValidator",
        "file": "src/app/core/validators/localization.validator.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "ValidatorFn"
      }
    ],
    "typealiases": [],
    "enumerations": [
      {
        "name": "ModalEnum",
        "childs": [
          {
            "name": "CONFIRM",
            "value": "confirm"
          },
          {
            "name": "CANCEL",
            "value": "cancel"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/app/core/models/modal.enum.ts"
      },
      {
        "name": "SportCategories",
        "childs": [
          {
            "name": "FOOTBALL",
            "value": "football"
          },
          {
            "name": "BASKETBALL",
            "value": "basketball"
          },
          {
            "name": "BOXING",
            "value": "boxing"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/app/core/models/sport-categories.enum.ts"
      }
    ],
    "groupedVariables": {
      "src/app/app.config.ts": [
        {
          "name": "ACCESS_TOKEN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.config.ts",
          "type": "",
          "defaultValue": "new InjectionToken<string>('access-token')"
        }
      ],
      "src/app/core/core.module.ts": [
        {
          "name": "accessTokenProvider",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/core.module.ts",
          "type": "object",
          "defaultValue": "{\n  provide: ACCESS_TOKEN,\n  useValue: environment.mapbox.accessToken\n}"
        }
      ],
      "src/app/dashboard/state/club.actions.ts": [
        {
          "name": "addClub",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Add Club',\n  props<{ club: SportClub }>()\n)"
        },
        {
          "name": "addClubFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Add Failure',\n  props<{ error: string }>()\n)"
        },
        {
          "name": "addClubSuccess",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Add Success',\n  props<{ club: SportClub }>()\n)"
        },
        {
          "name": "deleteClub",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Delete',\n  props<{ id: number }>()\n)"
        },
        {
          "name": "deleteClubFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Delete Failure',\n  props<{ error: string }>()\n)"
        },
        {
          "name": "deleteClubSuccess",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Delete Success',\n  props<{ id: number }>()\n)"
        },
        {
          "name": "loadClubs",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction('[Sport Clubs] Load')"
        },
        {
          "name": "loadClubsFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Load Failure',\n  props<{ error: string }>()\n)"
        },
        {
          "name": "loadClubsSuccessful",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Load Successful',\n  props<{ clubs: SportClub[] }>()\n)"
        },
        {
          "name": "updateClub",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Update',\n  props<{ club: SportClub }>()\n)"
        },
        {
          "name": "updateClubFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Update Failure',\n  props<{ error: string }>()\n)"
        },
        {
          "name": "updateClubSuccess",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n  '[Sport Clubs] Update Success',\n  props<{ club: SportClub }>()\n)"
        }
      ],
      "src/app/dashboard/state/club.reducer.ts": [
        {
          "name": "clubReducer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.reducer.ts",
          "type": "",
          "defaultValue": "createReducer<ClubState>(\n  initialState,\n  on(\n    ClubActions.loadClubsSuccessful,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        clubs: action.clubs,\n        error: ''\n      };\n    }\n  ),\n  on(\n    ClubActions.loadClubsFailure,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        clubs: null,\n        error: action.error\n      };\n    }\n  ),\n  on(\n    ClubActions.deleteClubSuccess,\n    (state, action): ClubState => {\n      const clubs: SportClub[] = state.clubs.filter((club) => club.id !== action.id);\n\n      return {\n        ...state,\n        clubs\n      };\n    }\n  ),\n  on(\n    ClubActions.deleteClubFailure,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(\n    ClubActions.addClubSuccess,\n    (state, action): ClubState => {\n      const clubs: SportClub[] = [...state.clubs, action.club];\n\n      return {\n        ...state,\n        clubs\n      };\n    }\n  ),\n  on(\n    ClubActions.addClubFailure,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(\n    ClubActions.updateClubSuccess,\n    (state, action): ClubState => {\n      return {\n        ...state,\n        clubs: state.clubs.map((club) => (club.id === action.club.id ? action.club : club))\n      };\n    }\n  )\n)"
        },
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.reducer.ts",
          "type": "ClubState",
          "defaultValue": "{\n  clubs: null,\n  error: ''\n}"
        }
      ],
      "src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "type": "literal type"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "type": "object",
          "defaultValue": "{\n  production: true,\n  mapbox: {\n    accessToken:\n      'pk.eyJ1Ijoia29zbWFnYSIsImEiOiJja25vZTkzc3AwbmRwMnVsYXlncm5reW11In0.pTcaWlaltMbDcofKlAPHMw'\n  }\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "type": "object",
          "defaultValue": "{\n  production: false,\n  mapbox: {\n    accessToken: 'pk.eyJ1Ijoia29zbWFnYSIsImEiOiJja25vZTkzc3AwbmRwMnVsYXlncm5reW11In0.pTcaWlaltMbDcofKlAPHMw'\n  }\n}"
        }
      ],
      "src/app/dashboard/state/club.selectors.ts": [
        {
          "name": "getClubById",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n  getClubFeatureState,\n  (state: ClubState, { id }) => state.clubs.find((club) => club.id === id)\n)"
        },
        {
          "name": "getClubFeatureState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.selectors.ts",
          "type": "",
          "defaultValue": "createFeatureSelector<ClubState>('clubs')"
        },
        {
          "name": "getClubs",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n  getClubFeatureState,\n  (state) => state.clubs\n)"
        },
        {
          "name": "getError",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/state/club.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n  getClubFeatureState,\n  (state) => state.error\n)"
        }
      ],
      "src/stories/Button.stories.ts": [
        {
          "name": "Large",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Secondary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Small",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "type": "Story<Button>",
          "defaultValue": "(args: Button) => ({\n  props: args,\n})"
        }
      ],
      "src/stories/Header.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "type": "Story<Header>",
          "defaultValue": "(args: Header) => ({\n  props: args,\n})"
        }
      ],
      "src/stories/Page.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "type": "Story<Page>",
          "defaultValue": "(args: Page) => ({\n  props: args,\n})"
        }
      ],
      "src/app/shared/material.module.ts": [
        {
          "name": "MODULES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/material.module.ts",
          "type": "[]",
          "defaultValue": "[\n  MatSidenavModule,\n  MatListModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatMenuModule,\n  MatButtonModule,\n  MatDialogModule,\n  MatTableModule,\n  MatSortModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatSnackBarModule,\n  MatSelectModule,\n  MatAutocompleteModule,\n  MatCardModule,\n  MatProgressSpinnerModule\n]"
        }
      ],
      "src/app/dashboard/animations.ts": [
        {
          "name": "slideInAnimation",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/animations.ts",
          "type": "",
          "defaultValue": "trigger('routeAnimations', [\n  transition('one <=> two', [\n    style({ position: 'relative' }),\n    query(':enter, :leave', [\n      style({\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%'\n      })\n    ]),\n    query(':enter', [style({ left: '-100%' })]),\n    query(':leave', animateChild()),\n    group([\n      query(':leave', [animate('300ms ease-out', style({ left: '100%' }))]),\n      query(':enter', [animate('300ms ease-out', style({ left: '0%' }))])\n    ]),\n    query(':enter', animateChild())\n  ])\n])"
        }
      ],
      "src/app/core/models/breakpoints.constants.ts": [
        {
          "name": "SMALL_WIDTH_BREAKPOINT",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/core/models/breakpoints.constants.ts",
          "type": "number",
          "defaultValue": "720"
        }
      ],
      "src/app/dashboard/services/sport-clubs.service.ts": [
        {
          "name": "SPORT_CLUBS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/dashboard/services/sport-clubs.service.ts",
          "type": "",
          "defaultValue": "new InjectionToken<SportClubsService>('SportClubsService')"
        }
      ]
    },
    "groupedFunctions": {
      "src/app/core/validators/localization.validator.ts": [
        {
          "name": "localizationValidator",
          "file": "src/app/core/validators/localization.validator.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "ValidatorFn"
        }
      ]
    },
    "groupedEnumerations": {
      "src/app/core/models/modal.enum.ts": [
        {
          "name": "ModalEnum",
          "childs": [
            {
              "name": "CONFIRM",
              "value": "confirm"
            },
            {
              "name": "CANCEL",
              "value": "cancel"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/app/core/models/modal.enum.ts"
        }
      ],
      "src/app/core/models/sport-categories.enum.ts": [
        {
          "name": "SportCategories",
          "childs": [
            {
              "name": "FOOTBALL",
              "value": "football"
            },
            {
              "name": "BASKETBALL",
              "value": "basketball"
            },
            {
              "name": "BOXING",
              "value": "boxing"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/app/core/models/sport-categories.enum.ts"
        }
      ]
    },
    "groupedTypeAliases": {}
  },
  "routes": {
    "name": "<root>",
    "kind": "module",
    "className": "AppModule",
    "children": [
      {
        "name": "routes",
        "filename": "src/app/app-routing.module.ts",
        "module": "AppRoutingModule",
        "kind": "module"
      }
    ]
  },
  "coverage": {
    "count": 1,
    "status": "low",
    "files": [
      {
        "filePath": "e2e/src/app.po.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AppPage",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/app.config.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ACCESS_TOKEN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/core.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "accessTokenProvider",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/models/breakpoints.constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SMALL_WIDTH_BREAKPOINT",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/core/models/coordinates.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Coordinates",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/core/models/localization-response.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "LocalizationResponse",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/core/models/localization.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Localization",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/core/models/sport-club.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "SportClub",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/core/validators/localization.validator.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "localizationValidator",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/animations.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "slideInAnimation",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/components/club-content/club-content.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClubContentComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/components/club-list/club-list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClubListComponent",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/components/club-modal-form/club-modal-form.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClubModalFormComponent",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/components/map/map.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MapComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/components/toolbar/toolbar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ToolbarComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/containers/clubs/clubs.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClubsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/services/drawer.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DrawerService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/services/http-sport-clubs.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "HttpSportClubsService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/services/map-search.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MapSearchService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/services/map.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MapService",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/services/sport-clubs.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "SportClubsService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/services/sport-clubs.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SPORT_CLUBS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "addClub",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "addClubFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "addClubSuccess",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "deleteClub",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "deleteClubFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "deleteClubSuccess",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadClubs",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadClubsFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadClubsSuccessful",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "updateClub",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "updateClubFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "updateClubSuccess",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.effects.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ClubEffects",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.reducer.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClubState",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "clubReducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getClubById",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getClubFeatureState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getClubs",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/club.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getError",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/dashboard/state/index.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "State",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/components/warning-modal/warning-modal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "WarningModalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/material.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MODULES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Large",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Secondary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Small",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 83,
        "coverageCount": "5/6",
        "status": "very-good"
      },
      {
        "filePath": "src/stories/header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
